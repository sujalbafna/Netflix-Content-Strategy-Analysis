# -*- coding: utf-8 -*-
"""Netflix.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yRJQfFgI-H9Yz-wuXGDWtfmm5SlUhuvI
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import plotly.io as pio
pio.templates.default = "plotly_white"

netflix_data = pd.read_csv("Netflix.csv")

netflix_data.head()

# Strip any unwanted spaces from column names
netflix_data.columns = netflix_data.columns.str.strip()

# Print the actual column names to check for typos or case sensitivity issues
print(netflix_data.columns)

# Convert 'Runtime (min)' to numeric format,
# ensuring the column name matches exactly with the printed output above
# Check if 'Runtime (min)' is in the columns, and if not, use the actual name
if 'Runtime (min)' in netflix_data.columns:
    netflix_data['Runtime (min)'] = netflix_data['Runtime (min)'].replace(',', '', regex=True).astype(float)
else:
    # If not found, find the closest match and use that instead
    closest_match = next((col for col in netflix_data.columns if 'Runtime (min)' in col), None)
    if closest_match:
        print(f"Using column '{closest_match}' instead of 'Runtime (min)'")
        netflix_data[closest_match] = netflix_data[closest_match].replace(',', '', regex=True).astype(float)
    else:
        print("Could not find a suitable column for 'Runtime (min)'")

# Display the first few rows to confirm
print(netflix_data[['Title', 'Runtime (min)']].head() if 'Runtime (min)' in netflix_data.columns else netflix_data.head())

print(netflix_data.columns)

# Count content by country
country_count = netflix_data['Country'].value_counts().head(10)

# Create the plot
import plotly.graph_objects as go

fig = go.Figure(data=[
    go.Bar(
        x=country_count.index,
        y=country_count.values,
        marker_color='lightgreen'
    )
])

fig.update_layout(
    title='Top 10 Countries by Content Count',
    xaxis_title='Country',
    yaxis_title='Content Count',
    xaxis_tickangle=45,
    height=600,
    width=1000
)

fig.show()

# Count the content by Rating and Type (Movies vs TV Shows)
rating_type_count = netflix_data.groupby(['Rating', 'Type']).size().unstack()

# Create the plot
fig = go.Figure(data=[
    go.Bar(
        x=rating_type_count.index,
        y=rating_type_count['Movie'],
        name='Movies',
        marker_color='lightcoral'
    ),
    go.Bar(
        x=rating_type_count.index,
        y=rating_type_count['TV Show'],
        name='TV Shows',
        marker_color='lightblue'
    )
])

fig.update_layout(
    title='Content Distribution by Rating and Type (Movie/TV Show)',
    xaxis_title='Rating',
    yaxis_title='Content Count',
    barmode='stack',
    height=600,
    width=1000
)

fig.show()

# Count content by director
director_count = netflix_data['Director'].value_counts().head(5)

# Create the plot
fig = go.Figure(data=[
    go.Bar(
        x=director_count.index,
        y=director_count.values,
        marker_color='lightblue'
    )
])

fig.update_layout(
    title='Top 5 Directors with the Most Content on Netflix',
    xaxis_title='Director',
    yaxis_title='Content Count',
    xaxis_tickangle=45,
    height=600,
    width=1000
)

fig.show()

# Convert runtime to numeric and handle non-numeric values
netflix_data['Runtime (min)'] = pd.to_numeric(netflix_data['Runtime (min)'], errors='coerce')

# Calculate the average runtime by content type
average_runtime_by_type = netflix_data.groupby('Type')['Runtime (min)'].mean()

# Create the plot
fig = go.Figure(data=[
    go.Bar(
        x=average_runtime_by_type.index,
        y=average_runtime_by_type.values,
        marker_color='lightgreen'
    )
])

fig.update_layout(
    title='Average Runtime by Content Type (Movie/TV Show)',
    xaxis_title='Content Type',
    yaxis_title='Average Runtime (min)',
    height=500,
    width=800
)

fig.show()

# Count content by language
language_count = netflix_data['Language'].value_counts().head(10)

# Create the plot
fig = go.Figure(data=[
    go.Bar(
        x=language_count.index,
        y=language_count.values,
        marker_color='lightcoral'
    )
])

fig.update_layout(
    title='Top 10 Languages by Content Count',
    xaxis_title='Language',
    yaxis_title='Content Count',
    xaxis_tickangle=45,
    height=600,
    width=1000
)

fig.show()

# Count content by release year
release_year_count = netflix_data['Release Year'].value_counts().sort_index()

# Create the plot
fig = go.Figure(data=[
    go.Bar(
        x=release_year_count.index,
        y=release_year_count.values,
        marker_color='skyblue'
    )
])

fig.update_layout(
    title='Content Releases Over Time by Year',
    xaxis_title='Release Year',
    yaxis_title='Content Count',
    height=500,
    width=800
)

fig.show()

# Count content types by genre
type_genre_count = netflix_data.groupby(['Genre', 'Type']).size().unstack()

# Create the plot
fig = go.Figure(data=[
    go.Bar(
        x=type_genre_count.index,
        y=type_genre_count['Movie'],
        name='Movies',
        marker_color='lightcoral'
    ),
    go.Bar(
        x=type_genre_count.index,
        y=type_genre_count['TV Show'],
        name='TV Shows',
        marker_color='lightblue'
    )
])

fig.update_layout(
    title='Content Types (Movies/TV Shows) by Genre',
    xaxis_title='Genre',
    yaxis_title='Content Count',
    barmode='stack',
    height=600,
    width=1000
)

fig.show()

# Count content ratings by release year
rating_year_count = netflix_data.groupby(['Release Year', 'Rating']).size().unstack()

# Create the plot
fig = go.Figure()

for rating in rating_year_count.columns:
    fig.add_trace(
        go.Scatter(
            x=rating_year_count.index,
            y=rating_year_count[rating],
            mode='lines+markers',
            name=rating
        )
    )

fig.update_layout(
    title='Content Ratings Over Time',
    xaxis_title='Release Year',
    yaxis_title='Content Count',
    height=600,
    width=1000,
    legend_title='Rating'
)

fig.show()

# Calculate the average runtime by rating
average_runtime_by_rating = netflix_data.groupby('Rating')['Runtime (min)'].mean()

# Create the plot
fig = go.Figure(data=[
    go.Bar(
        x=average_runtime_by_rating.index,
        y=average_runtime_by_rating.values,
        marker_color='orange'
    )
])

fig.update_layout(
    title='Average Runtime by Content Rating',
    xaxis_title='Rating',
    yaxis_title='Average Runtime (min)',
    height=500,
    width=800
)

fig.show()

# Count content by genre
genre_count = netflix_data['Genre'].value_counts().head(10)

# Create the plot
fig = go.Figure(data=[
    go.Bar(
        x=genre_count.index,
        y=genre_count.values,
        marker_color='lightblue'
    )
])

fig.update_layout(
    title='Top 10 Genres by Content Count',
    xaxis_title='Genre',
    yaxis_title='Content Count',
    xaxis_tickangle=45,
    height=600,
    width=1000
)

fig.show()